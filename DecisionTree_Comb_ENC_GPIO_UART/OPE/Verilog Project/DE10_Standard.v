
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_Standard(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		 reg    [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire RxD;
reg seg7_disp_off_signal;

parameter req_byte_length = 4;
parameter storage_length = 784;
reg transmit;
wire tick;
wire [7:0] receive_data;
//reg [7:0] count_value;
wire receive_done;
wire [7:0] mem_data;
reg [31:0] mem_address;
reg [31:0] written_mem_address;
reg mem_wr;
reg first_val_receive;
reg txdone_flag;
reg [7:0] pixels[storage_length*req_byte_length-1:0];
reg [31:0] Encrypted_pixels[storage_length-1:0];
reg [31:0] encrypted_pixel_temp_store;
reg [9:0] encrypted_pixel_address;
reg [31:0] Label;
reg [7:0] serial_transmit_reg;
reg [7:0] count_bytes;
reg [7:0] count_label_bytes;

// defining the registers for each node of decision tree
reg Allpixel_receive_complete;
reg [15:0] state;
reg ml_inference_completed;


//=======================================================
//  Structural coding
//=======================================================


Binary_To_7Segment seg1 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label[3:0] : mem_address[3:0]),  .o_Segment_A(HEX0[0]), .o_Segment_B(HEX0[1]),  .o_Segment_C(HEX0[2]), 
                          .o_Segment_D(HEX0[3]), .o_Segment_E(HEX0[4]), .o_Segment_F(HEX0[5]), .o_Segment_G(HEX0[6]));
								  
Binary_To_7Segment seg2 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label[7:4] : mem_address[7:4]),  .o_Segment_A(HEX1[0]), .o_Segment_B(HEX1[1]),  .o_Segment_C(HEX1[2]), 
                          .o_Segment_D(HEX1[3]), .o_Segment_E(HEX1[4]), .o_Segment_F(HEX1[5]), .o_Segment_G(HEX1[6]));
								  
Binary_To_7Segment seg3 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label[11:8] : mem_address[9:8]),  .o_Segment_A(HEX2[0]), .o_Segment_B(HEX2[1]),  .o_Segment_C(HEX2[2]), 
                          .o_Segment_D(HEX2[3]), .o_Segment_E(HEX2[4]), .o_Segment_F(HEX2[5]), .o_Segment_G(HEX2[6]));
								  
								  
Binary_To_7Segment seg4 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label[15:12] : written_mem_address[3:0]),  .o_Segment_A(HEX3[0]), .o_Segment_B(HEX3[1]),  .o_Segment_C(HEX3[2]), 
                          .o_Segment_D(HEX3[3]), .o_Segment_E(HEX3[4]), .o_Segment_F(HEX3[5]), .o_Segment_G(HEX3[6]));
								  
Binary_To_7Segment seg5 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label[19:16] : written_mem_address[7:4]),  .o_Segment_A(HEX4[0]), .o_Segment_B(HEX4[1]),  .o_Segment_C(HEX4[2]), 
                          .o_Segment_D(HEX4[3]), .o_Segment_E(HEX4[4]), .o_Segment_F(HEX4[5]), .o_Segment_G(HEX4[6]));
								  
Binary_To_7Segment seg6 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label[23:20] : written_mem_address[9:8]),  .o_Segment_A(HEX5[0]), .o_Segment_B(HEX5[1]),  .o_Segment_C(HEX5[2]), 
                          .o_Segment_D(HEX5[3]), .o_Segment_E(HEX5[4]), .o_Segment_F(HEX5[5]), .o_Segment_G(HEX5[6]));

					  
								  
assign RxD = GPIO[0];  //UART receiver pin for FPGA
// GPIO[1];  //UART transmitter Pin for FPGA


uart_rx R3 (.i_Clock(CLOCK_50), .i_Rx_Serial(RxD), .o_Rx_DV(receive_done), .o_Rx_Byte(receive_data) );

always @ (posedge receive_done)
begin
      if (SW[0] == 1)    begin LEDR[1] <= 0; end
      else begin LEDR[1] <= ~LEDR[1]; end
end

always @ (posedge CLOCK_50)
begin
    if (SW[0] == 1)
         begin
            count_label_bytes <= 0;
            count_bytes <= 0;
            first_val_receive <= 0;
            mem_address <= 0;
            mem_wr <=0;
            encrypted_pixel_address <= 0;
				seg7_disp_off_signal <=0;
         end
		else if (receive_done == 1)
        begin
			  pixels[mem_address] <= receive_data;
			  count_bytes <= count_bytes+1;
				case (count_bytes[1:0])
				   2'b00: encrypted_pixel_temp_store[31:24] <= receive_data; 
					2'b01: encrypted_pixel_temp_store[23:16] <= receive_data;
					2'b10: encrypted_pixel_temp_store[15:8] <= receive_data;
					2'b11: encrypted_pixel_temp_store[7:0] <= receive_data;
					 
				endcase
			  mem_address <= mem_address+1; written_mem_address <= mem_address;         
			  if (count_bytes == req_byte_length-1)
					begin
						count_bytes <= 0;
						Encrypted_pixels[encrypted_pixel_address] <= {encrypted_pixel_temp_store[31:8], receive_data};
						encrypted_pixel_address <= encrypted_pixel_address + 1;
						if (encrypted_pixel_address >= storage_length-1)
							begin Allpixel_receive_complete <=1; end
						else
							begin Allpixel_receive_complete <=0; end
					end
        end
     
     if (tick == 1)
         begin
           if (txdone_flag == 0 )
               begin
                    txdone_flag <= 1;
               end
           else 
               begin
                    mem_address <= mem_address+1;
                    txdone_flag <= 0;
               end              
         end
     
     if (mem_address < written_mem_address && SW[1]== 1)
     begin
        transmit <= 1;    
        serial_transmit_reg <= pixels[mem_address];    
     end
     else if (mem_address > written_mem_address && mem_address <= written_mem_address+req_byte_length && SW[1]== 1)
     begin  
        if (count_label_bytes == 0)
		  begin  serial_transmit_reg <= Label[31:24]; end 
		  if (count_label_bytes == 1)
        begin  serial_transmit_reg <= Label[23:16]; end 
        if (count_label_bytes == 2)
        begin  serial_transmit_reg <= Label[15:8]; end 
        if (count_label_bytes == 3)
        begin  serial_transmit_reg <= Label[7:0]; end   
        if (tick == 1 && txdone_flag == 1)
        begin count_label_bytes <= count_label_bytes+1; end
        transmit <= 1; 
     end
     else
     begin
        transmit <=0; 
     end 
	  
	  if (SW[2] == 1)
         begin
				seg7_disp_off_signal <= 1;
         end
end

uart_tx T1 (.i_Clock(CLOCK_50), .i_Tx_DV(transmit), .i_Tx_Byte(serial_transmit_reg), .o_Tx_Active(), .o_Tx_Serial(GPIO[1]), .o_Tx_Done(tick) );



always @ (*)
    begin
      if (Encrypted_pixels[350] <= 32'd21624175)
    if (Encrypted_pixels[568] <= 32'd10051064)
      if (Encrypted_pixels[430] <= 32'd10051064)
        if (Encrypted_pixels[405] <= 32'd10051064)
          if (Encrypted_pixels[484] <= 32'd10051064)
            if (Encrypted_pixels[153] <= 32'd10110880)
              if (Encrypted_pixels[594] <= 32'd11763668)
                if (Encrypted_pixels[156] <= 32'd10051064)
                   Label <= 32'd10459335;
                else  // if Encrypted_pixels[156] > 0
                   Label <= 32'd10110880;
              else  // if Encrypted_pixels[594] > 21
                if (Encrypted_pixels[435] <= 32'd15783505)
                   Label <= 32'd10051064;
                else  // if Encrypted_pixels[435] > 71
                   Label <= 32'd10239092;
            else  // if Encrypted_pixels[153] > 1
              if (Encrypted_pixels[571] <= 32'd10311743)
                if (Encrypted_pixels[426] <= 32'd10645813)
                   Label <= 32'd10239092;
                else  // if Encrypted_pixels[426] > 10
                   Label <= 32'd10051064;
              else  // if Encrypted_pixels[571] > 5
                if (Encrypted_pixels[322] <= 32'd18770967)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[322] > 97
                   Label <= 32'd10311743;
          else  // if Encrypted_pixels[484] > 0
            if (Encrypted_pixels[211] <= 32'd10621710)
              if (Encrypted_pixels[487] <= 32'd24528725)
                if (Encrypted_pixels[514] <= 32'd10051064)
                   Label <= 32'd10459335;
                else  // if Encrypted_pixels[514] > 0
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[487] > 161
                if (Encrypted_pixels[622] <= 32'd10847584)
                   Label <= 32'd10256163;
                else  // if Encrypted_pixels[622] > 15
                   Label <= 32'd10178451;
            else  // if Encrypted_pixels[211] > 9
              if (Encrypted_pixels[437] <= 32'd10110880)
                if (Encrypted_pixels[489] <= 32'd10311743)
                   Label <= 32'd10051064;
                else  // if Encrypted_pixels[489] > 5
                   Label <= 32'd10621710;
              else  // if Encrypted_pixels[437] > 1
                if (Encrypted_pixels[427] <= 32'd10051064)
                   Label <= 32'd10459335;
                else  // if Encrypted_pixels[427] > 0
                   Label <= 32'd10621710;
        else  // if Encrypted_pixels[405] > 0
          if (Encrypted_pixels[516] <= 32'd10459335)
            if (Encrypted_pixels[353] <= 32'd10178451)
              if (Encrypted_pixels[322] <= 32'd10708006)
                if (Encrypted_pixels[355] <= 32'd10810050)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[355] > 14
                   Label <= 32'd10256163;
              else  // if Encrypted_pixels[322] > 12
                if (Encrypted_pixels[546] <= 32'd13330733)
                   Label <= 32'd10239092;
                else  // if Encrypted_pixels[546] > 38
                   Label <= 32'd10110880;
            else  // if Encrypted_pixels[353] > 2
              if (Encrypted_pixels[346] <= 32'd10110880)
                if (Encrypted_pixels[180] <= 32'd10957410)
                   Label <= 32'd10621710;
                else  // if Encrypted_pixels[180] > 16
                   Label <= 32'd10239092;
              else  // if Encrypted_pixels[346] > 1
                if (Encrypted_pixels[210] <= 32'd10428057)
                   Label <= 32'd10256163;
                else  // if Encrypted_pixels[210] > 6
                   Label <= 32'd10621710;
          else  // if Encrypted_pixels[516] > 7
            if (Encrypted_pixels[376] <= 32'd10239092)
              if (Encrypted_pixels[208] <= 32'd10110880)
                if (Encrypted_pixels[289] <= 32'd10051064)
                   Label <= 32'd10110880;
                else  // if Encrypted_pixels[289] > 0
                   Label <= 32'd10459335;
              else  // if Encrypted_pixels[208] > 1
                if (Encrypted_pixels[709] <= 32'd10964188)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[709] > 17
                   Label <= 32'd10459335;
            else  // if Encrypted_pixels[376] > 3
              if (Encrypted_pixels[658] <= 32'd10428057)
                if (Encrypted_pixels[127] <= 32'd10810050)
                   Label <= 32'd10621710;
                else  // if Encrypted_pixels[127] > 14
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[658] > 6
                if (Encrypted_pixels[434] <= 32'd17697882)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[434] > 85
                   Label <= 32'd10495495;
      else  // if Encrypted_pixels[430] > 0
        if (Encrypted_pixels[211] <= 32'd12228678)
          if (Encrypted_pixels[98] <= 32'd10051064)
            if (Encrypted_pixels[267] <= 32'd20922159)
              if (Encrypted_pixels[95] <= 32'd10110880)
                if (Encrypted_pixels[155] <= 32'd16822442)
                   Label <= 32'd10256163;
                else  // if Encrypted_pixels[155] > 78
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[95] > 1
                if (Encrypted_pixels[242] <= 32'd19195352)
                   Label <= 32'd10428057;
                else  // if Encrypted_pixels[242] > 104
                   Label <= 32'd10256163;
            else  // if Encrypted_pixels[267] > 121
              if (Encrypted_pixels[381] <= 32'd10178451)
                if (Encrypted_pixels[412] <= 32'd10239092)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[412] > 3
                   Label <= 32'd10459335;
              else  // if Encrypted_pixels[381] > 2
                if (Encrypted_pixels[406] <= 32'd12113758)
                   Label <= 32'd10459335;
                else  // if Encrypted_pixels[406] > 24
                   Label <= 32'd10621710;
          else  // if Encrypted_pixels[98] > 0
            if (Encrypted_pixels[537] <= 32'd10495495)
              if (Encrypted_pixels[242] <= 32'd17124478)
                if (Encrypted_pixels[572] <= 32'd10621710)
                   Label <= 32'd10428057;
                else  // if Encrypted_pixels[572] > 9
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[242] > 81
                if (Encrypted_pixels[327] <= 32'd12411484)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[327] > 29
                   Label <= 32'd10051064;
            else  // if Encrypted_pixels[537] > 8
              if (Encrypted_pixels[264] <= 32'd19566562)
                 Label <= 32'd10178451;
              else  // if Encrypted_pixels[264] > 108
                 Label <= 32'd10256163;
        else  // if Encrypted_pixels[211] > 28
          if (Encrypted_pixels[156] <= 32'd10051064)
            if (Encrypted_pixels[381] <= 32'd10700220)
              if (Encrypted_pixels[217] <= 32'd10239092)
                if (Encrypted_pixels[542] <= 32'd15715255)
                   Label <= 32'd10621710;
                else  // if Encrypted_pixels[542] > 70
                   Label <= 32'd10051064;
              else  // if Encrypted_pixels[217] > 3
                if (Encrypted_pixels[357] <= 32'd10428057)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[357] > 6
                   Label <= 32'd10621710;
            else  // if Encrypted_pixels[381] > 11
              if (Encrypted_pixels[317] <= 32'd10051064)
                if (Encrypted_pixels[342] <= 32'd10110880)
                   Label <= 32'd10621710;
                else  // if Encrypted_pixels[342] > 1
                   Label <= 32'd10621710;
              else  // if Encrypted_pixels[317] > 0
                if (Encrypted_pixels[570] <= 32'd19375230)
                   Label <= 32'd10621710;
                else  // if Encrypted_pixels[570] > 106
                   Label <= 32'd10495495;
          else  // if Encrypted_pixels[156] > 0
            if (Encrypted_pixels[101] <= 32'd10110880)
              if (Encrypted_pixels[656] <= 32'd10110880)
                if (Encrypted_pixels[572] <= 32'd10051064)
                   Label <= 32'd10256163;
                else  // if Encrypted_pixels[572] > 0
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[656] > 1
                if (Encrypted_pixels[434] <= 32'd10051064)
                   Label <= 32'd10051064;
                else  // if Encrypted_pixels[434] > 0
                   Label <= 32'd10311743;
            else  // if Encrypted_pixels[101] > 1
              if (Encrypted_pixels[538] <= 32'd16516335)
                if (Encrypted_pixels[571] <= 32'd10110880)
                   Label <= 32'd10428057;
                else  // if Encrypted_pixels[571] > 1
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[538] > 75
                if (Encrypted_pixels[265] <= 32'd23549793)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[265] > 149
                   Label <= 32'd10051064;
    else  // if Encrypted_pixels[568] > 0
      if (Encrypted_pixels[435] <= 32'd10051064)
        if (Encrypted_pixels[489] <= 32'd13978160)
          if (Encrypted_pixels[380] <= 32'd10178451)
            if (Encrypted_pixels[324] <= 32'd25576794)
              if (Encrypted_pixels[73] <= 32'd10495495)
                if (Encrypted_pixels[516] <= 32'd29011573)
                   Label <= 32'd10051064;
                else  // if Encrypted_pixels[516] > 202
                   Label <= 32'd10051064;
              else  // if Encrypted_pixels[73] > 8
                if (Encrypted_pixels[468] <= 32'd10110880)
                   Label <= 32'd10051064;
                else  // if Encrypted_pixels[468] > 1
                   Label <= 32'd10428057;
            else  // if Encrypted_pixels[324] > 173
              if (Encrypted_pixels[427] <= 32'd16449773)
                if (Encrypted_pixels[241] <= 32'd10110880)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[241] > 1
                   Label <= 32'd10239092;
              else  // if Encrypted_pixels[427] > 74
                if (Encrypted_pixels[210] <= 32'd10957410)
                   Label <= 32'd10239092;
                else  // if Encrypted_pixels[210] > 16
                   Label <= 32'd10051064;
          else  // if Encrypted_pixels[380] > 2
            if (Encrypted_pixels[298] <= 32'd25525499)
              if (Encrypted_pixels[485] <= 32'd18425234)
                if (Encrypted_pixels[375] <= 32'd11885383)
                   Label <= 32'd10239092;
                else  // if Encrypted_pixels[375] > 22
                   Label <= 32'd10311743;
              else  // if Encrypted_pixels[485] > 93
                if (Encrypted_pixels[216] <= 32'd12161483)
                   Label <= 32'd10428057;
                else  // if Encrypted_pixels[216] > 25
                   Label <= 32'd10051064;
            else  // if Encrypted_pixels[298] > 172
              if (Encrypted_pixels[319] <= 32'd10178451)
                if (Encrypted_pixels[398] <= 32'd21872065)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[398] > 129
                   Label <= 32'd10051064;
              else  // if Encrypted_pixels[319] > 2
                if (Encrypted_pixels[212] <= 32'd12908743)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[212] > 31
                   Label <= 32'd10051064;
        else  // if Encrypted_pixels[489] > 47
          if (Encrypted_pixels[347] <= 32'd10110880)
            if (Encrypted_pixels[344] <= 32'd14869055)
              if (Encrypted_pixels[520] <= 32'd10178451)
                if (Encrypted_pixels[518] <= 32'd28507066)
                   Label <= 32'd10110880;
                else  // if Encrypted_pixels[518] > 196
                   Label <= 32'd10495495;
              else  // if Encrypted_pixels[520] > 2
                if (Encrypted_pixels[685] <= 32'd12207861)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[685] > 26
                   Label <= 32'd10459335;
            else  // if Encrypted_pixels[344] > 60
              if (Encrypted_pixels[512] <= 32'd10957410)
                 Label <= 32'd10311743;
              else  // if Encrypted_pixels[512] > 16
                if (Encrypted_pixels[386] <= 32'd33875088)
                   Label <= 32'd10256163;
                else  // if Encrypted_pixels[386] > 251
                   Label <= 32'd10051064;
          else  // if Encrypted_pixels[347] > 1
            if (Encrypted_pixels[494] <= 32'd12113758)
              if (Encrypted_pixels[379] <= 32'd19566562)
                if (Encrypted_pixels[485] <= 32'd32583906)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[485] > 235
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[379] > 108
                if (Encrypted_pixels[386] <= 32'd21766390)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[386] > 127
                   Label <= 32'd10428057;
            else  // if Encrypted_pixels[494] > 24
              if (Encrypted_pixels[358] <= 32'd27046868)
                if (Encrypted_pixels[573] <= 32'd11667110)
                   Label <= 32'd10256163;
                else  // if Encrypted_pixels[573] > 20
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[358] > 184
                if (Encrypted_pixels[345] <= 32'd23600049)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[345] > 150
                   Label <= 32'd10051064;
      else  // if Encrypted_pixels[435] > 0
        if (Encrypted_pixels[346] <= 32'd10051064)
          if (Encrypted_pixels[348] <= 32'd18694294)
            if (Encrypted_pixels[371] <= 32'd15060946)
              if (Encrypted_pixels[155] <= 32'd10051064)
                if (Encrypted_pixels[652] <= 32'd10428057)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[652] > 6
                   Label <= 32'd10110880;
              else  // if Encrypted_pixels[155] > 0
                if (Encrypted_pixels[684] <= 32'd10645813)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[684] > 10
                   Label <= 32'd10239092;
            else  // if Encrypted_pixels[371] > 63
              if (Encrypted_pixels[213] <= 32'd10178451)
                if (Encrypted_pixels[402] <= 32'd17697882)
                   Label <= 32'd10428057;
                else  // if Encrypted_pixels[402] > 85
                   Label <= 32'd10178451;
              else  // if Encrypted_pixels[213] > 2
                if (Encrypted_pixels[343] <= 32'd10700220)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[343] > 11
                   Label <= 32'd10495495;
          else  // if Encrypted_pixels[348] > 95
            if (Encrypted_pixels[353] <= 32'd10110880)
              if (Encrypted_pixels[513] <= 32'd18694294)
                if (Encrypted_pixels[356] <= 32'd10621710)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[356] > 9
                   Label <= 32'd10495495;
              else  // if Encrypted_pixels[513] > 95
                if (Encrypted_pixels[430] <= 32'd14003727)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[430] > 49
                   Label <= 32'd10428057;
            else  // if Encrypted_pixels[353] > 1
              if (Encrypted_pixels[466] <= 32'd13978160)
                if (Encrypted_pixels[405] <= 32'd19741924)
                   Label <= 32'd10051064;
                else  // if Encrypted_pixels[405] > 110
                   Label <= 32'd10495495;
              else  // if Encrypted_pixels[466] > 47
                if (Encrypted_pixels[242] <= 32'd10311743)
                   Label <= 32'd10428057;
                else  // if Encrypted_pixels[242] > 5
                   Label <= 32'd10495495;
        else  // if Encrypted_pixels[346] > 0
          if (Encrypted_pixels[655] <= 32'd10051064)
            if (Encrypted_pixels[271] <= 32'd10110880)
              if (Encrypted_pixels[484] <= 32'd10311743)
                if (Encrypted_pixels[489] <= 32'd10810050)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[489] > 14
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[484] > 5
                if (Encrypted_pixels[218] <= 32'd10847584)
                   Label <= 32'd10428057;
                else  // if Encrypted_pixels[218] > 15
                   Label <= 32'd10311743;
            else  // if Encrypted_pixels[271] > 1
              if (Encrypted_pixels[354] <= 32'd10239092)
                if (Encrypted_pixels[357] <= 32'd10256163)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[357] > 4
                   Label <= 32'd10178451;
              else  // if Encrypted_pixels[354] > 3
                if (Encrypted_pixels[156] <= 32'd10738547)
                   Label <= 32'd10256163;
                else  // if Encrypted_pixels[156] > 13
                   Label <= 32'd10178451;
          else  // if Encrypted_pixels[655] > 0
            if (Encrypted_pixels[354] <= 32'd10051064)
              if (Encrypted_pixels[384] <= 32'd12113758)
                if (Encrypted_pixels[352] <= 32'd22106706)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[352] > 134
                   Label <= 32'd10495495;
              else  // if Encrypted_pixels[384] > 24
                if (Encrypted_pixels[522] <= 32'd15923727)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[522] > 72
                   Label <= 32'd10051064;
            else  // if Encrypted_pixels[354] > 0
              if (Encrypted_pixels[434] <= 32'd13490312)
                if (Encrypted_pixels[626] <= 32'd30064936)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[626] > 211
                   Label <= 32'd10051064;
              else  // if Encrypted_pixels[434] > 41
                if (Encrypted_pixels[487] <= 32'd10178451)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[487] > 2
                   Label <= 32'd10495495;
  else  // if Encrypted_pixels[350] > 126
    if (Encrypted_pixels[489] <= 32'd12161483)
      if (Encrypted_pixels[290] <= 32'd13115331)
        if (Encrypted_pixels[486] <= 32'd14629144)
          if (Encrypted_pixels[296] <= 32'd10178451)
            if (Encrypted_pixels[490] <= 32'd18134712)
              if (Encrypted_pixels[299] <= 32'd10110880)
                if (Encrypted_pixels[186] <= 32'd10621710)
                   Label <= 32'd10239092;
                else  // if Encrypted_pixels[186] > 9
                   Label <= 32'd10311743;
              else  // if Encrypted_pixels[299] > 1
                if (Encrypted_pixels[315] <= 32'd11763668)
                   Label <= 32'd10239092;
                else  // if Encrypted_pixels[315] > 21
                   Label <= 32'd10256163;
            else  // if Encrypted_pixels[490] > 90
              if (Encrypted_pixels[572] <= 32'd10256163)
                if (Encrypted_pixels[403] <= 32'd10957410)
                   Label <= 32'd10110880;
                else  // if Encrypted_pixels[403] > 16
                   Label <= 32'd10459335;
              else  // if Encrypted_pixels[572] > 4
                if (Encrypted_pixels[355] <= 32'd10708006)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[355] > 12
                   Label <= 32'd10178451;
          else  // if Encrypted_pixels[296] > 2
            if (Encrypted_pixels[153] <= 32'd10051064)
              if (Encrypted_pixels[208] <= 32'd14300211)
                if (Encrypted_pixels[539] <= 32'd10178451)
                   Label <= 32'd10256163;
                else  // if Encrypted_pixels[539] > 2
                   Label <= 32'd10311743;
              else  // if Encrypted_pixels[208] > 51
                if (Encrypted_pixels[316] <= 32'd13677650)
                   Label <= 32'd10239092;
                else  // if Encrypted_pixels[316] > 43
                   Label <= 32'd10621710;
            else  // if Encrypted_pixels[153] > 0
              if (Encrypted_pixels[488] <= 32'd14869055)
                if (Encrypted_pixels[315] <= 32'd18753691)
                   Label <= 32'd10239092;
                else  // if Encrypted_pixels[315] > 96
                   Label <= 32'd10239092;
              else  // if Encrypted_pixels[488] > 60
                if (Encrypted_pixels[406] <= 32'd14579174)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[406] > 56
                   Label <= 32'd10495495;
        else  // if Encrypted_pixels[486] > 58
          if (Encrypted_pixels[657] <= 32'd10256163)
            if (Encrypted_pixels[152] <= 32'd11365368)
              if (Encrypted_pixels[271] <= 32'd10110880)
                if (Encrypted_pixels[601] <= 32'd15315763)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[601] > 67
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[271] > 1
                if (Encrypted_pixels[384] <= 32'd16449773)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[384] > 74
                   Label <= 32'd10051064;
            else  // if Encrypted_pixels[152] > 18
              if (Encrypted_pixels[439] <= 32'd14490267)
                if (Encrypted_pixels[343] <= 32'd10311743)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[343] > 5
                   Label <= 32'd10495495;
              else  // if Encrypted_pixels[439] > 54
                if (Encrypted_pixels[324] <= 32'd33723953)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[324] > 250
                   Label <= 32'd10239092;
          else  // if Encrypted_pixels[657] > 4
            if (Encrypted_pixels[439] <= 32'd10239092)
              if (Encrypted_pixels[464] <= 32'd10110880)
                if (Encrypted_pixels[125] <= 32'd10621710)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[125] > 9
                   Label <= 32'd10178451;
              else  // if Encrypted_pixels[464] > 1
                if (Encrypted_pixels[459] <= 32'd14003727)
                   Label <= 32'd10239092;
                else  // if Encrypted_pixels[459] > 49
                   Label <= 32'd10495495;
            else  // if Encrypted_pixels[439] > 3
              if (Encrypted_pixels[179] <= 32'd10708006)
                if (Encrypted_pixels[267] <= 32'd32797269)
                   Label <= 32'd10428057;
                else  // if Encrypted_pixels[267] > 239
                   Label <= 32'd10051064;
              else  // if Encrypted_pixels[179] > 12
                if (Encrypted_pixels[315] <= 32'd10700220)
                   Label <= 32'd10239092;
                else  // if Encrypted_pixels[315] > 11
                   Label <= 32'd10495495;
      else  // if Encrypted_pixels[290] > 34
        if (Encrypted_pixels[297] <= 32'd10459335)
          if (Encrypted_pixels[486] <= 32'd14629144)
            if (Encrypted_pixels[186] <= 32'd10178451)
              if (Encrypted_pixels[293] <= 32'd30389757)
                if (Encrypted_pixels[328] <= 32'd10428057)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[328] > 6
                   Label <= 32'd10256163;
              else  // if Encrypted_pixels[293] > 214
                if (Encrypted_pixels[151] <= 32'd10708006)
                   Label <= 32'd10239092;
                else  // if Encrypted_pixels[151] > 12
                   Label <= 32'd10239092;
            else  // if Encrypted_pixels[186] > 2
              if (Encrypted_pixels[301] <= 32'd14490267)
                if (Encrypted_pixels[294] <= 32'd33875088)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[294] > 251
                   Label <= 32'd10239092;
              else  // if Encrypted_pixels[301] > 54
                if (Encrypted_pixels[381] <= 32'd10738547)
                   Label <= 32'd10051064;
                else  // if Encrypted_pixels[381] > 13
                   Label <= 32'd10495495;
          else  // if Encrypted_pixels[486] > 58
            if (Encrypted_pixels[656] <= 32'd10311743)
              if (Encrypted_pixels[402] <= 32'd18425234)
                if (Encrypted_pixels[400] <= 32'd24337832)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[400] > 159
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[402] > 93
                if (Encrypted_pixels[218] <= 32'd10239092)
                   Label <= 32'd10428057;
                else  // if Encrypted_pixels[218] > 3
                   Label <= 32'd10311743;
            else  // if Encrypted_pixels[656] > 5
              if (Encrypted_pixels[373] <= 32'd13873290)
                if (Encrypted_pixels[412] <= 32'd31864861)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[412] > 229
                   Label <= 32'd10051064;
              else  // if Encrypted_pixels[373] > 46
                if (Encrypted_pixels[329] <= 32'd10459335)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[329] > 7
                   Label <= 32'd10051064;
        else  // if Encrypted_pixels[297] > 7
          if (Encrypted_pixels[598] <= 32'd10239092)
            if (Encrypted_pixels[210] <= 32'd10256163)
              if (Encrypted_pixels[404] <= 32'd10459335)
                if (Encrypted_pixels[150] <= 32'd10110880)
                   Label <= 32'd10459335;
                else  // if Encrypted_pixels[150] > 1
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[404] > 7
                if (Encrypted_pixels[380] <= 32'd33648479)
                   Label <= 32'd10621710;
                else  // if Encrypted_pixels[380] > 248
                   Label <= 32'd10256163;
            else  // if Encrypted_pixels[210] > 4
              if (Encrypted_pixels[653] <= 32'd17049015)
                if (Encrypted_pixels[154] <= 32'd10459335)
                   Label <= 32'd10621710;
                else  // if Encrypted_pixels[154] > 7
                   Label <= 32'd10621710;
              else  // if Encrypted_pixels[653] > 80
                if (Encrypted_pixels[513] <= 32'd23600049)
                   Label <= 32'd10239092;
                else  // if Encrypted_pixels[513] > 150
                   Label <= 32'd10495495;
          else  // if Encrypted_pixels[598] > 3
            if (Encrypted_pixels[486] <= 32'd10621710)
              if (Encrypted_pixels[427] <= 32'd25115710)
                if (Encrypted_pixels[269] <= 32'd10110880)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[269] > 1
                   Label <= 32'd10239092;
              else  // if Encrypted_pixels[427] > 168
                if (Encrypted_pixels[380] <= 32'd24337832)
                   Label <= 32'd10051064;
                else  // if Encrypted_pixels[380] > 159
                   Label <= 32'd10311743;
            else  // if Encrypted_pixels[486] > 9
              if (Encrypted_pixels[400] <= 32'd12053585)
                if (Encrypted_pixels[545] <= 32'd13115331)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[545] > 34
                   Label <= 32'd10495495;
              else  // if Encrypted_pixels[400] > 23
                if (Encrypted_pixels[242] <= 32'd13636489)
                   Label <= 32'd10428057;
                else  // if Encrypted_pixels[242] > 42
                   Label <= 32'd10051064;
    else  // if Encrypted_pixels[489] > 25
      if (Encrypted_pixels[521] <= 32'd10051064)
        if (Encrypted_pixels[347] <= 32'd10459335)
          if (Encrypted_pixels[206] <= 32'd10256163)
            if (Encrypted_pixels[328] <= 32'd10051064)
              if (Encrypted_pixels[608] <= 32'd10621710)
                if (Encrypted_pixels[438] <= 32'd10495495)
                   Label <= 32'd10110880;
                else  // if Encrypted_pixels[438] > 8
                   Label <= 32'd10178451;
              else  // if Encrypted_pixels[608] > 9
                if (Encrypted_pixels[125] <= 32'd10708006)
                   Label <= 32'd10110880;
                else  // if Encrypted_pixels[125] > 12
                   Label <= 32'd10178451;
            else  // if Encrypted_pixels[328] > 0
              if (Encrypted_pixels[238] <= 32'd10178451)
                if (Encrypted_pixels[624] <= 32'd10051064)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[624] > 0
                   Label <= 32'd10110880;
              else  // if Encrypted_pixels[238] > 2
                if (Encrypted_pixels[322] <= 32'd12161483)
                   Label <= 32'd10239092;
                else  // if Encrypted_pixels[322] > 25
                   Label <= 32'd10495495;
          else  // if Encrypted_pixels[206] > 4
            if (Encrypted_pixels[609] <= 32'd10645813)
              if (Encrypted_pixels[713] <= 32'd10495495)
                if (Encrypted_pixels[515] <= 32'd15783505)
                   Label <= 32'd10110880;
                else  // if Encrypted_pixels[515] > 71
                   Label <= 32'd10178451;
              else  // if Encrypted_pixels[713] > 8
                if (Encrypted_pixels[661] <= 32'd10239092)
                   Label <= 32'd10459335;
                else  // if Encrypted_pixels[661] > 3
                   Label <= 32'd10239092;
            else  // if Encrypted_pixels[609] > 10
              if (Encrypted_pixels[400] <= 32'd10495495)
                if (Encrypted_pixels[414] <= 32'd10239092)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[414] > 3
                   Label <= 32'd10239092;
              else  // if Encrypted_pixels[400] > 8
                if (Encrypted_pixels[512] <= 32'd21154015)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[512] > 124
                   Label <= 32'd10428057;
        else  // if Encrypted_pixels[347] > 7
          if (Encrypted_pixels[460] <= 32'd15362959)
            if (Encrypted_pixels[212] <= 32'd14579174)
              if (Encrypted_pixels[510] <= 32'd10428057)
                if (Encrypted_pixels[321] <= 32'd30871825)
                   Label <= 32'd10256163;
                else  // if Encrypted_pixels[321] > 221
                   Label <= 32'd10110880;
              else  // if Encrypted_pixels[510] > 6
                if (Encrypted_pixels[497] <= 32'd12113758)
                   Label <= 32'd10311743;
                else  // if Encrypted_pixels[497] > 24
                   Label <= 32'd10178451;
            else  // if Encrypted_pixels[212] > 56
              if (Encrypted_pixels[155] <= 32'd10700220)
                if (Encrypted_pixels[567] <= 32'd10311743)
                   Label <= 32'd10621710;
                else  // if Encrypted_pixels[567] > 5
                   Label <= 32'd10311743;
              else  // if Encrypted_pixels[155] > 11
                if (Encrypted_pixels[294] <= 32'd25008933)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[294] > 167
                   Label <= 32'd10110880;
          else  // if Encrypted_pixels[460] > 68
            if (Encrypted_pixels[294] <= 32'd25576794)
              if (Encrypted_pixels[657] <= 32'd10110880)
                if (Encrypted_pixels[578] <= 32'd24069123)
                   Label <= 32'd10256163;
                else  // if Encrypted_pixels[578] > 157
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[657] > 1
                if (Encrypted_pixels[182] <= 32'd13490312)
                   Label <= 32'd10256163;
                else  // if Encrypted_pixels[182] > 41
                   Label <= 32'd10495495;
            else  // if Encrypted_pixels[294] > 173
              if (Encrypted_pixels[374] <= 32'd10110880)
                if (Encrypted_pixels[273] <= 32'd13869191)
                   Label <= 32'd10110880;
                else  // if Encrypted_pixels[273] > 45
                   Label <= 32'd10495495;
              else  // if Encrypted_pixels[374] > 1
                if (Encrypted_pixels[272] <= 32'd10495495)
                   Label <= 32'd10256163;
                else  // if Encrypted_pixels[272] > 8
                   Label <= 32'd10311743;
      else  // if Encrypted_pixels[521] > 0
        if (Encrypted_pixels[658] <= 32'd10051064)
          if (Encrypted_pixels[555] <= 32'd10621710)
            if (Encrypted_pixels[601] <= 32'd10239092)
              if (Encrypted_pixels[661] <= 32'd10110880)
                if (Encrypted_pixels[383] <= 32'd10495495)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[383] > 8
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[661] > 1
                if (Encrypted_pixels[459] <= 32'd12113758)
                   Label <= 32'd10110880;
                else  // if Encrypted_pixels[459] > 24
                   Label <= 32'd10621710;
            else  // if Encrypted_pixels[601] > 3
              if (Encrypted_pixels[654] <= 32'd10311743)
                if (Encrypted_pixels[430] <= 32'd18026941)
                   Label <= 32'd10428057;
                else  // if Encrypted_pixels[430] > 88
                   Label <= 32'd10428057;
              else  // if Encrypted_pixels[654] > 5
                if (Encrypted_pixels[552] <= 32'd10311743)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[552] > 5
                   Label <= 32'd10178451;
          else  // if Encrypted_pixels[555] > 9
            if (Encrypted_pixels[385] <= 32'd20353394)
              if (Encrypted_pixels[343] <= 32'd34084541)
                if (Encrypted_pixels[312] <= 32'd10964188)
                   Label <= 32'd10178451;
                else  // if Encrypted_pixels[312] > 17
                   Label <= 32'd10495495;
              else  // if Encrypted_pixels[343] > 253
                if (Encrypted_pixels[514] <= 32'd11885383)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[514] > 22
                   Label <= 32'd10428057;
            else  // if Encrypted_pixels[385] > 114
              if (Encrypted_pixels[597] <= 32'd27779031)
                if (Encrypted_pixels[638] <= 32'd13115331)
                   Label <= 32'd10428057;
                else  // if Encrypted_pixels[638] > 34
                   Label <= 32'd10256163;
              else  // if Encrypted_pixels[597] > 190
                 Label <= 32'd10178451;
        else  // if Encrypted_pixels[658] > 0
          if (Encrypted_pixels[515] <= 32'd14348370)
            if (Encrypted_pixels[270] <= 32'd10239092)
              if (Encrypted_pixels[466] <= 32'd10621710)
                if (Encrypted_pixels[575] <= 32'd25115710)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[575] > 168
                   Label <= 32'd10110880;
              else  // if Encrypted_pixels[466] > 9
                if (Encrypted_pixels[522] <= 32'd15060946)
                   Label <= 32'd10256163;
                else  // if Encrypted_pixels[522] > 63
                   Label <= 32'd10495495;
            else  // if Encrypted_pixels[270] > 3
              if (Encrypted_pixels[318] <= 32'd10964188)
                if (Encrypted_pixels[404] <= 32'd14447938)
                   Label <= 32'd10459335;
                else  // if Encrypted_pixels[404] > 53
                   Label <= 32'd10239092;
              else  // if Encrypted_pixels[318] > 17
                if (Encrypted_pixels[410] <= 32'd15362959)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[410] > 68
                   Label <= 32'd10621710;
          else  // if Encrypted_pixels[515] > 52
            if (Encrypted_pixels[546] <= 32'd24504358)
              if (Encrypted_pixels[468] <= 32'd23815899)
                if (Encrypted_pixels[526] <= 32'd12411484)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[526] > 29
                   Label <= 32'd10178451;
              else  // if Encrypted_pixels[468] > 155
                if (Encrypted_pixels[408] <= 32'd13229076)
                   Label <= 32'd10051064;
                else  // if Encrypted_pixels[408] > 36
                   Label <= 32'd10495495;
            else  // if Encrypted_pixels[546] > 160
              if (Encrypted_pixels[272] <= 32'd10459335)
                if (Encrypted_pixels[155] <= 32'd10110880)
                   Label <= 32'd10459335;
                else  // if Encrypted_pixels[155] > 1
                   Label <= 32'd10110880;
              else  // if Encrypted_pixels[272] > 7
                if (Encrypted_pixels[580] <= 32'd33875088)
                   Label <= 32'd10495495;
                else  // if Encrypted_pixels[580] > 251
                   Label <= 32'd10178451;

    end




endmodule

module Binary_To_7Segment 
  (
   input       i_Clk,
	input [3:0] i_Binary_Num,
   output      o_Segment_A,
   output      o_Segment_B,
   output      o_Segment_C,
   output      o_Segment_D,
   output      o_Segment_E,
   output      o_Segment_F,
   output      o_Segment_G
   );
 
  reg [6:0]    r_Hex_Encoding = 7'h00;
   
  // Purpose: Creates a case statement for all possible input binary numbers.
  // Drives r_Hex_Encoding appropriately for each input combination.
  // Encoding at https://www.fpga4student.com/2017/09/seven-segment-led-display-controller-basys3-fpga.html
  always @(posedge i_Clk)
    begin
      case (i_Binary_Num)
        4'b0000 : r_Hex_Encoding <= 7'b0000001;
        4'b0001 : r_Hex_Encoding <= 7'b1001111;
        4'b0010 : r_Hex_Encoding <= 7'b0010010;
        4'b0011 : r_Hex_Encoding <= 7'b0000110;
        4'b0100 : r_Hex_Encoding <= 7'b1001100;         
        4'b0101 : r_Hex_Encoding <= 7'b0100100;
        4'b0110 : r_Hex_Encoding <= 7'b0100000;
        4'b0111 : r_Hex_Encoding <= 7'b0001111;
        4'b1000 : r_Hex_Encoding <= 7'b0000000;
        4'b1001 : r_Hex_Encoding <= 7'b0000100; 
		  4'b1010 : r_Hex_Encoding <= 7'b0001000; //a
		  4'b1011 : r_Hex_Encoding <= 7'b1100000; //b
		  4'b1100 : r_Hex_Encoding <= 7'b0110001;  //c
		  4'b1101 : r_Hex_Encoding <= 7'b1000010;  //d
		  4'b1110 : r_Hex_Encoding <= 7'b0110000;  //e
		  4'b1111 : r_Hex_Encoding <= 7'b0111000;  //f
        default: r_Hex_Encoding = 7'b1111111;
      endcase
    end // always @ (posedge i_Clk)
 
  // r_Hex_Encoding[7] is unused
  assign o_Segment_A = r_Hex_Encoding[6];
  assign o_Segment_B = r_Hex_Encoding[5];
  assign o_Segment_C = r_Hex_Encoding[4];
  assign o_Segment_D = r_Hex_Encoding[3];
  assign o_Segment_E = r_Hex_Encoding[2];
  assign o_Segment_F = r_Hex_Encoding[1];
  assign o_Segment_G = r_Hex_Encoding[0];
 
endmodule // Binary_To_7Segment



//////////////////////////////////////////////////////////////////////
// File Downloaded from http://www.nandland.com
//////////////////////////////////////////////////////////////////////
// This file contains the UART Receiver.  This receiver is able to
// receive 8 bits of serial data, one start bit, one stop bit,
// and no parity bit.  When receive is complete o_rx_dv will be
// driven high for one clock cycle.
// https://www.nandland.com/vhdl/modules/module-uart-serial-port-rs232.html
// Set Parameter CLKS_PER_BIT as follows:
// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)
// Example: 50 MHz Clock, 921600 baud UART
// (50000000)/(921600) = 53
  
module uart_rx   #(parameter CLKS_PER_BIT = 53)
  (
   input        i_Clock,
   input        i_Rx_Serial,
   output       o_Rx_DV,
   output [7:0] o_Rx_Byte
   );
    
  parameter s_IDLE         = 3'b000;
  parameter s_RX_START_BIT = 3'b001;
  parameter s_RX_DATA_BITS = 3'b010;
  parameter s_RX_STOP_BIT  = 3'b011; 
  parameter s_CLEANUP      = 3'b100;
   
  reg           r_Rx_Data_R = 1'b1;
  reg           r_Rx_Data   = 1'b1;
   
  reg [7:0]     r_Clock_Count = 0;
  reg [2:0]     r_Bit_Index   = 0; //8 bits total
  reg [7:0]     r_Rx_Byte     = 0;
  reg           r_Rx_DV       = 0;
  reg [2:0]     r_SM_Main     = 0;
   
  // Purpose: Double-register the incoming data.
  // This allows it to be used in the UART RX Clock Domain.
  // (It removes problems caused by metastability)
  always @(posedge i_Clock)
    begin
      r_Rx_Data_R <= i_Rx_Serial;
      r_Rx_Data   <= r_Rx_Data_R;
    end
   
   
  // Purpose: Control RX state machine
  always @(posedge i_Clock)
    begin
       
      case (r_SM_Main)
        s_IDLE :
          begin
            r_Rx_DV       <= 1'b0;
            r_Clock_Count <= 0;
            r_Bit_Index   <= 0;
             
            if (r_Rx_Data == 1'b0)          // Start bit detected
              r_SM_Main <= s_RX_START_BIT;
            else
              r_SM_Main <= s_IDLE;
          end
         
        // Check middle of start bit to make sure it's still low
        s_RX_START_BIT :
          begin
            if (r_Clock_Count == (CLKS_PER_BIT-1)/2)
              begin
                if (r_Rx_Data == 1'b0)
                  begin
                    r_Clock_Count <= 0;  // reset counter, found the middle
                    r_SM_Main     <= s_RX_DATA_BITS;
                  end
                else
                  r_SM_Main <= s_IDLE;
              end
            else
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_START_BIT;
              end
          end // case: s_RX_START_BIT
         
         
        // Wait CLKS_PER_BIT-1 clock cycles to sample serial data
        s_RX_DATA_BITS :
          begin
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_DATA_BITS;
              end
            else
              begin
                r_Clock_Count          <= 0;
                r_Rx_Byte[r_Bit_Index] <= r_Rx_Data;
                 
                // Check if we have received all bits
                if (r_Bit_Index < 7)
                  begin
                    r_Bit_Index <= r_Bit_Index + 1;
                    r_SM_Main   <= s_RX_DATA_BITS;
                  end
                else
                  begin
                    r_Bit_Index <= 0;
                    r_SM_Main   <= s_RX_STOP_BIT;
                  end
              end
          end // case: s_RX_DATA_BITS
     
     
        // Receive Stop bit.  Stop bit = 1
        s_RX_STOP_BIT :
          begin
            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_STOP_BIT;
              end
            else
              begin
                r_Rx_DV       <= 1'b1;
                r_Clock_Count <= 0;
                r_SM_Main     <= s_CLEANUP;
              end
          end // case: s_RX_STOP_BIT
     
        // Stay here 1 clock
        s_CLEANUP :
          begin
            r_SM_Main <= s_IDLE;
            r_Rx_DV   <= 1'b0;
          end
         
         
        default :
          r_SM_Main <= s_IDLE;
         
      endcase
    end   
   
  assign o_Rx_DV   = r_Rx_DV;
  assign o_Rx_Byte = r_Rx_Byte;
   
endmodule // uart_rx


//////////////////////////////////////////////////////////////////////
// File Downloaded from http://www.nandland.com
//////////////////////////////////////////////////////////////////////
// This file contains the UART Transmitter.  This transmitter is able
// to transmit 8 bits of serial data, one start bit, one stop bit,
// and no parity bit.  When transmit is complete o_Tx_done will be
// driven high for one clock cycle.
//
// Set Parameter CLKS_PER_BIT as follows:
// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)
// Example: 50 MHz Clock, 921600 baud UART
// (50000000)/(921600) = 53
  
module uart_tx 
  #(parameter CLKS_PER_BIT = 53)
  (
   input       i_Clock,
   input       i_Tx_DV,
   input [7:0] i_Tx_Byte, 
   output      o_Tx_Active,
   output reg  o_Tx_Serial,
   output      o_Tx_Done
   );
  
  parameter s_IDLE         = 3'b000;
  parameter s_TX_START_BIT = 3'b001;
  parameter s_TX_DATA_BITS = 3'b010;
  parameter s_TX_STOP_BIT  = 3'b011;
  parameter s_CLEANUP      = 3'b100;
   
  reg [2:0]    r_SM_Main     = 0;
  reg [7:0]    r_Clock_Count = 0;
  reg [2:0]    r_Bit_Index   = 0;
  reg [7:0]    r_Tx_Data     = 0;
  reg          r_Tx_Done     = 0;
  reg          r_Tx_Active   = 0;
     
  always @(posedge i_Clock)
    begin
       
      case (r_SM_Main)
        s_IDLE :
          begin
            o_Tx_Serial   <= 1'b1;         // Drive Line High for Idle
            r_Tx_Done     <= 1'b0;
            r_Clock_Count <= 0;
            r_Bit_Index   <= 0;
             
            if (i_Tx_DV == 1'b1)
              begin
                r_Tx_Active <= 1'b1;
                r_Tx_Data   <= i_Tx_Byte;
                r_SM_Main   <= s_TX_START_BIT;
              end
            else
              r_SM_Main <= s_IDLE;
          end // case: s_IDLE
         
         
        // Send out Start Bit. Start bit = 0
        s_TX_START_BIT :
          begin
            o_Tx_Serial <= 1'b0;
             
            // Wait CLKS_PER_BIT-1 clock cycles for start bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_START_BIT;
              end
            else
              begin
                r_Clock_Count <= 0;
                r_SM_Main     <= s_TX_DATA_BITS;
              end
          end // case: s_TX_START_BIT
         
         
        // Wait CLKS_PER_BIT-1 clock cycles for data bits to finish         
        s_TX_DATA_BITS :
          begin
            o_Tx_Serial <= r_Tx_Data[r_Bit_Index];
             
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_DATA_BITS;
              end
            else
              begin
                r_Clock_Count <= 0;
                 
                // Check if we have sent out all bits
                if (r_Bit_Index < 7)
                  begin
                    r_Bit_Index <= r_Bit_Index + 1;
                    r_SM_Main   <= s_TX_DATA_BITS;
                  end
                else
                  begin
                    r_Bit_Index <= 0;
                    r_SM_Main   <= s_TX_STOP_BIT;
                  end
              end
          end // case: s_TX_DATA_BITS
         
         
        // Send out Stop bit.  Stop bit = 1
        s_TX_STOP_BIT :
          begin
            o_Tx_Serial <= 1'b1;
             
            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_STOP_BIT;
              end
            else
              begin
                r_Tx_Done     <= 1'b1;
                r_Clock_Count <= 0;
                r_SM_Main     <= s_CLEANUP;
                r_Tx_Active   <= 1'b0;
              end
          end // case: s_Tx_STOP_BIT
         
         
        // Stay here 1 clock
        s_CLEANUP :
          begin
            r_Tx_Done <= 1'b1;
            r_SM_Main <= s_IDLE;
          end
         
         
        default :
          r_SM_Main <= s_IDLE;
         
      endcase
    end
 
  assign o_Tx_Active = r_Tx_Active;
  assign o_Tx_Done   = r_Tx_Done;
   
endmodule

