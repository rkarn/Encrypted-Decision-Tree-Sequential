
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_Standard(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		 reg    [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire RxD;
reg seg7_disp_off_signal;

parameter req_byte_length = 4;
parameter storage_length = 784;
reg transmit;
wire tick;
wire [7:0] receive_data;
//reg [7:0] count_value;
wire receive_done;
wire [7:0] mem_data;
reg [31:0] mem_address;
reg [31:0] written_mem_address;
reg mem_wr;
reg first_val_receive;
reg txdone_flag;
reg [7:0] pixels[storage_length*req_byte_length-1:0];
reg [31:0] Encrypted_pixels[storage_length-1:0];
reg [31:0] encrypted_pixel_temp_store;
reg [9:0] encrypted_pixel_address;
reg [31:0] Label;
reg [7:0] serial_transmit_reg;
reg [7:0] count_bytes;
reg [7:0] count_label_bytes;

// defining the registers for each node of decision tree
reg Allpixel_receive_complete;
reg [15:0] state;
reg ml_inference_completed;


//=======================================================
//  Structural coding
//=======================================================


Binary_To_7Segment seg1 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label[3:0] : mem_address[3:0]),  .o_Segment_A(HEX0[0]), .o_Segment_B(HEX0[1]),  .o_Segment_C(HEX0[2]), 
                          .o_Segment_D(HEX0[3]), .o_Segment_E(HEX0[4]), .o_Segment_F(HEX0[5]), .o_Segment_G(HEX0[6]));
								  
Binary_To_7Segment seg2 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label[7:4] : mem_address[7:4]),  .o_Segment_A(HEX1[0]), .o_Segment_B(HEX1[1]),  .o_Segment_C(HEX1[2]), 
                          .o_Segment_D(HEX1[3]), .o_Segment_E(HEX1[4]), .o_Segment_F(HEX1[5]), .o_Segment_G(HEX1[6]));
								  
Binary_To_7Segment seg3 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label[11:8] : mem_address[9:8]),  .o_Segment_A(HEX2[0]), .o_Segment_B(HEX2[1]),  .o_Segment_C(HEX2[2]), 
                          .o_Segment_D(HEX2[3]), .o_Segment_E(HEX2[4]), .o_Segment_F(HEX2[5]), .o_Segment_G(HEX2[6]));
								  
								  
Binary_To_7Segment seg4 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label[15:12] : written_mem_address[3:0]),  .o_Segment_A(HEX3[0]), .o_Segment_B(HEX3[1]),  .o_Segment_C(HEX3[2]), 
                          .o_Segment_D(HEX3[3]), .o_Segment_E(HEX3[4]), .o_Segment_F(HEX3[5]), .o_Segment_G(HEX3[6]));
								  
Binary_To_7Segment seg5 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label[19:16] : written_mem_address[7:4]),  .o_Segment_A(HEX4[0]), .o_Segment_B(HEX4[1]),  .o_Segment_C(HEX4[2]), 
                          .o_Segment_D(HEX4[3]), .o_Segment_E(HEX4[4]), .o_Segment_F(HEX4[5]), .o_Segment_G(HEX4[6]));
								  
Binary_To_7Segment seg6 (.i_Clk(CLOCK_50), .i_Binary_Num(seg7_disp_off_signal? Label[23:20] : written_mem_address[9:8]),  .o_Segment_A(HEX5[0]), .o_Segment_B(HEX5[1]),  .o_Segment_C(HEX5[2]), 
                          .o_Segment_D(HEX5[3]), .o_Segment_E(HEX5[4]), .o_Segment_F(HEX5[5]), .o_Segment_G(HEX5[6]));

					  
								  
assign RxD = GPIO[0];  //UART receiver pin for FPGA
// GPIO[1];  //UART transmitter Pin for FPGA


uart_rx R3 (.i_Clock(CLOCK_50), .i_Rx_Serial(RxD), .o_Rx_DV(receive_done), .o_Rx_Byte(receive_data) );

always @ (posedge receive_done)
begin
      if (SW[0] == 1)    begin LEDR[1] <= 0; end
      else begin LEDR[1] <= ~LEDR[1]; end
end

always @ (posedge CLOCK_50)
begin
    if (SW[0] == 1)
         begin
            count_label_bytes <= 0;
            count_bytes <= 0;
            first_val_receive <= 0;
            mem_address <= 0;
            mem_wr <=0;
            encrypted_pixel_address <= 0;
				seg7_disp_off_signal <=0;
         end
		else if (receive_done == 1)
        begin
			  pixels[mem_address] <= receive_data;
			  count_bytes <= count_bytes+1;
				case (count_bytes[1:0])
				   2'b00: encrypted_pixel_temp_store[31:24] <= receive_data; 
					2'b01: encrypted_pixel_temp_store[23:16] <= receive_data;
					2'b10: encrypted_pixel_temp_store[15:8] <= receive_data;
					2'b11: encrypted_pixel_temp_store[7:0] <= receive_data;
					 
				endcase
			  mem_address <= mem_address+1; written_mem_address <= mem_address;         
			  if (count_bytes == req_byte_length-1)
					begin
						count_bytes <= 0;
						Encrypted_pixels[encrypted_pixel_address] <= {encrypted_pixel_temp_store[31:8], receive_data};
						encrypted_pixel_address <= encrypted_pixel_address + 1;
						if (encrypted_pixel_address >= storage_length-1)
							begin Allpixel_receive_complete <=1; end
						else
							begin Allpixel_receive_complete <=0; end
					end
        end
     
     if (tick == 1)
         begin
           if (txdone_flag == 0 )
               begin
                    txdone_flag <= 1;
               end
           else 
               begin
                    mem_address <= mem_address+1;
                    txdone_flag <= 0;
               end              
         end
     
     if (mem_address < written_mem_address && SW[1]== 1)
     begin
        transmit <= 1;    
        serial_transmit_reg <= pixels[mem_address];    
     end
     else if (mem_address > written_mem_address && mem_address <= written_mem_address+req_byte_length && ml_inference_completed == 1 && SW[1]== 1)
     begin  
        if (count_label_bytes == 0)
		  begin  serial_transmit_reg <= Label[31:24]; end 
		  if (count_label_bytes == 1)
        begin  serial_transmit_reg <= Label[23:16]; end 
        if (count_label_bytes == 2)
        begin  serial_transmit_reg <= Label[15:8]; end 
        if (count_label_bytes == 3)
        begin  serial_transmit_reg <= Label[7:0]; end   
        if (tick == 1 && txdone_flag == 1)
        begin count_label_bytes <= count_label_bytes+1; end
        transmit <= 1; 
     end
     else
     begin
        transmit <=0; 
     end 
	  
	  if (SW[2] == 1)
         begin
				seg7_disp_off_signal <= 1;
         end
end

uart_tx T1 (.i_Clock(CLOCK_50), .i_Tx_DV(transmit), .i_Tx_Byte(serial_transmit_reg), .o_Tx_Active(), .o_Tx_Serial(GPIO[1]), .o_Tx_Done(tick) );



always @ (posedge CLOCK_50)
    begin
    if (SW[0] == 1)
         begin
            state <= 0;
         end
         
    if (Allpixel_receive_complete==1)
        begin
 case (state)

16'd0:if (Encrypted_pixels[350] <= 21995049) begin state<=1; end  else begin state<=254; end 
 
16'd1:if (Encrypted_pixels[568] <= 10051064) begin state<=2; end  else begin state<=129; end 
 
16'd2:if (Encrypted_pixels[430] <= 10051064) begin state<=3; end  else begin state<=66; end 
 
16'd3:if (Encrypted_pixels[405] <= 10957410) begin state<=4; end  else begin state<=35; end 
 
16'd4:if (Encrypted_pixels[484] <= 10051064) begin state<=5; end  else begin state<=20; end 
 
16'd5:if (Encrypted_pixels[154] <= 10051064) begin state<=6; end  else begin state<=13; end 
 
16'd6:if (Encrypted_pixels[594] <= 11763668) begin state<=7; end  else begin state<=10; end 
 
16'd7:if (Encrypted_pixels[157] <= 10051064) begin Label<=10459335; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10110880; state<=0;ml_inference_completed<=1; end 

16'd10:if (Encrypted_pixels[302] <= 10428057) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd13:if (Encrypted_pixels[509] <= 11885383) begin state<=14; end  else begin state<=17; end 
 
16'd14:if (Encrypted_pixels[544] <= 10256163) begin Label<=10239092; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10178451; state<=0;ml_inference_completed<=1; end 

16'd17:if (Encrypted_pixels[323] <= 18770967) begin Label<=10051064; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd20:if (Encrypted_pixels[211] <= 10621710) begin state<=21; end  else begin state<=28; end 
 
16'd21:if (Encrypted_pixels[487] <= 22182362) begin state<=22; end  else begin state<=25; end 
 
16'd22:if (Encrypted_pixels[514] <= 10051064) begin Label<=10459335; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd25:if (Encrypted_pixels[294] <= 10495495) begin Label<=10256163; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10459335; state<=0;ml_inference_completed<=1; end 

16'd28:if (Encrypted_pixels[437] <= 10110880) begin state<=29; end  else begin state<=32; end 
 
16'd29:if (Encrypted_pixels[489] <= 10621710) begin Label<=10051064; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10621710; state<=0;ml_inference_completed<=1; end 

16'd32:if (Encrypted_pixels[427] <= 10051064) begin Label<=10459335; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10621710; state<=0;ml_inference_completed<=1; end 

16'd35:if (Encrypted_pixels[516] <= 10459335) begin state<=36; end  else begin state<=51; end 
 
16'd36:if (Encrypted_pixels[353] <= 10110880) begin state<=37; end  else begin state<=44; end 
 
16'd37:if (Encrypted_pixels[322] <= 10428057) begin state<=38; end  else begin state<=41; end 
 
16'd38:if (Encrypted_pixels[355] <= 10708006) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10256163; state<=0;ml_inference_completed<=1; end 

16'd41:if (Encrypted_pixels[546] <= 10178451) begin Label<=10239092; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 

16'd44:if (Encrypted_pixels[346] <= 10110880) begin state<=45; end  else begin state<=48; end 
 
16'd45:if (Encrypted_pixels[181] <= 11365368) begin Label<=10621710; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd48:if (Encrypted_pixels[210] <= 11885383) begin Label<=10256163; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10621710; state<=0;ml_inference_completed<=1; end 

16'd51:if (Encrypted_pixels[376] <= 10239092) begin state<=52; end  else begin state<=59; end 
 
16'd52:if (Encrypted_pixels[207] <= 10110880) begin state<=53; end  else begin state<=56; end 
 
16'd53:if (Encrypted_pixels[264] <= 18170021) begin Label<=10110880; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10459335; state<=0;ml_inference_completed<=1; end 

16'd56:if (Encrypted_pixels[484] <= 10428057) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd59:if (Encrypted_pixels[658] <= 10428057) begin state<=60; end  else begin state<=63; end 
 
16'd60:if (Encrypted_pixels[127] <= 10810050) begin Label<=10621710; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd63:if (Encrypted_pixels[434] <= 17997012) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd66:if (Encrypted_pixels[211] <= 12220718) begin state<=67; end  else begin state<=98; end 
 
16'd67:if (Encrypted_pixels[98] <= 10051064) begin state<=68; end  else begin state<=83; end 
 
16'd68:if (Encrypted_pixels[267] <= 20922159) begin state<=69; end  else begin state<=76; end 
 
16'd69:if (Encrypted_pixels[95] <= 10459335) begin state<=70; end  else begin state<=73; end 
 
16'd70:if (Encrypted_pixels[155] <= 16822442) begin Label<=10256163; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd73:if (Encrypted_pixels[242] <= 19195352) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10256163; state<=0;ml_inference_completed<=1; end 

16'd76:if (Encrypted_pixels[353] <= 10110880) begin state<=77; end  else begin state<=80; end 
 
16'd77:if (Encrypted_pixels[411] <= 20353394) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10459335; state<=0;ml_inference_completed<=1; end 

16'd80:if (Encrypted_pixels[432] <= 10708006) begin Label<=10459335; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10621710; state<=0;ml_inference_completed<=1; end 

16'd83:if (Encrypted_pixels[242] <= 13759948) begin state<=84; end  else begin state<=91; end 
 
16'd84:if (Encrypted_pixels[272] <= 27914552) begin state<=85; end  else begin state<=88; end 
 
16'd85:if (Encrypted_pixels[627] <= 34084541) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd88:if (Encrypted_pixels[512] <= 22076871) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10256163; state<=0;ml_inference_completed<=1; end 

16'd91:if (Encrypted_pixels[263] <= 15117359) begin state<=92; end  else begin state<=95; end 
 
16'd92:if (Encrypted_pixels[98] <= 12053585) begin Label<=10256163; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10178451; state<=0;ml_inference_completed<=1; end 

16'd95:if (Encrypted_pixels[459] <= 25115710) begin Label<=10051064; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd98:if (Encrypted_pixels[156] <= 10051064) begin state<=99; end  else begin state<=114; end 
 
16'd99:if (Encrypted_pixels[381] <= 10239092) begin state<=100; end  else begin state<=107; end 
 
16'd100:if (Encrypted_pixels[217] <= 12411484) begin state<=101; end  else begin state<=104; end 
 
16'd101:if (Encrypted_pixels[542] <= 15715255) begin Label<=10621710; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd104:if (Encrypted_pixels[358] <= 10621710) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd107:if (Encrypted_pixels[154] <= 10178451) begin state<=108; end  else begin state<=111; end 
 
16'd108:if (Encrypted_pixels[442] <= 10428057) begin Label<=10621710; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10459335; state<=0;ml_inference_completed<=1; end 

16'd111:if (Encrypted_pixels[292] <= 17177288) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10256163; state<=0;ml_inference_completed<=1; end 

16'd114:if (Encrypted_pixels[101] <= 10110880) begin state<=115; end  else begin state<=122; end 
 
16'd115:if (Encrypted_pixels[656] <= 10110880) begin state<=116; end  else begin state<=119; end 
 
16'd116:if (Encrypted_pixels[572] <= 10051064) begin Label<=10256163; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd119:if (Encrypted_pixels[434] <= 10459335) begin Label<=10051064; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 

16'd122:if (Encrypted_pixels[271] <= 23688318) begin state<=123; end  else begin state<=126; end 
 
16'd123:if (Encrypted_pixels[571] <= 10110880) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd126:if (Encrypted_pixels[489] <= 10428057) begin Label<=10051064; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10178451; state<=0;ml_inference_completed<=1; end 

16'd129:if (Encrypted_pixels[435] <= 10051064) begin state<=130; end  else begin state<=191; end 
 
16'd130:if (Encrypted_pixels[489] <= 11885383) begin state<=131; end  else begin state<=162; end 
 
16'd131:if (Encrypted_pixels[351] <= 10708006) begin state<=132; end  else begin state<=147; end 
 
16'd132:if (Encrypted_pixels[214] <= 10051064) begin state<=133; end  else begin state<=140; end 
 
16'd133:if (Encrypted_pixels[436] <= 10178451) begin state<=134; end  else begin state<=137; end 
 
16'd134:if (Encrypted_pixels[455] <= 11365368) begin Label<=10051064; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd137:if (Encrypted_pixels[540] <= 14629144) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd140:if (Encrypted_pixels[379] <= 20417394) begin state<=141; end  else begin state<=144; end 
 
16'd141:if (Encrypted_pixels[516] <= 29261974) begin Label<=10051064; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd144:if (Encrypted_pixels[216] <= 13178136) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 

16'd147:if (Encrypted_pixels[301] <= 10428057) begin state<=148; end  else begin state<=155; end 
 
16'd148:if (Encrypted_pixels[485] <= 14836263) begin state<=149; end  else begin state<=152; end 
 
16'd149:if (Encrypted_pixels[352] <= 33648479) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd152:if (Encrypted_pixels[297] <= 10178451) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd155:if (Encrypted_pixels[378] <= 13636489) begin state<=156; end  else begin state<=159; end 
 
16'd156:if (Encrypted_pixels[238] <= 10810050) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd159:if (Encrypted_pixels[294] <= 15362959) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 

16'd162:if (Encrypted_pixels[320] <= 10110880) begin state<=163; end  else begin state<=176; end 
 
16'd163:if (Encrypted_pixels[344] <= 17556604) begin state<=164; end  else begin state<=171; end 
 
16'd164:if (Encrypted_pixels[351] <= 10311743) begin state<=165; end  else begin state<=168; end 
 
16'd165:if (Encrypted_pixels[376] <= 15004161) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 

16'd168:if (Encrypted_pixels[402] <= 13999815) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd171:if (Encrypted_pixels[192] <= 13999815) begin state<=172; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
 
16'd172:if (Encrypted_pixels[599] <= 12880615) begin Label<=10256163; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd176:if (Encrypted_pixels[385] <= 11365368) begin state<=177; end  else begin state<=184; end 
 
16'd177:if (Encrypted_pixels[513] <= 15783505) begin state<=178; end  else begin state<=181; end 
 
16'd178:if (Encrypted_pixels[582] <= 10957410) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10178451; state<=0;ml_inference_completed<=1; end 

16'd181:if (Encrypted_pixels[405] <= 31666910) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd184:if (Encrypted_pixels[400] <= 14300211) begin state<=185; end  else begin state<=188; end 
 
16'd185:if (Encrypted_pixels[404] <= 10110880) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd188:if (Encrypted_pixels[378] <= 11885383) begin Label<=10051064; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd191:if (Encrypted_pixels[346] <= 10051064) begin state<=192; end  else begin state<=223; end 
 
16'd192:if (Encrypted_pixels[348] <= 16822442) begin state<=193; end  else begin state<=208; end 
 
16'd193:if (Encrypted_pixels[343] <= 13229076) begin state<=194; end  else begin state<=201; end 
 
16'd194:if (Encrypted_pixels[155] <= 10051064) begin state<=195; end  else begin state<=198; end 
 
16'd195:if (Encrypted_pixels[652] <= 10428057) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10110880; state<=0;ml_inference_completed<=1; end 

16'd198:if (Encrypted_pixels[517] <= 10495495) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10178451; state<=0;ml_inference_completed<=1; end 

16'd201:if (Encrypted_pixels[213] <= 10110880) begin state<=202; end  else begin state<=205; end 
 
16'd202:if (Encrypted_pixels[574] <= 10957410) begin Label<=10256163; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd205:if (Encrypted_pixels[401] <= 12908743) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd208:if (Encrypted_pixels[353] <= 10110880) begin state<=209; end  else begin state<=216; end 
 
16'd209:if (Encrypted_pixels[485] <= 18474629) begin state<=210; end  else begin state<=213; end 
 
16'd210:if (Encrypted_pixels[383] <= 10311743) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd213:if (Encrypted_pixels[130] <= 10964188) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd216:if (Encrypted_pixels[466] <= 13978160) begin state<=217; end  else begin state<=220; end 
 
16'd217:if (Encrypted_pixels[405] <= 19741924) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd220:if (Encrypted_pixels[242] <= 10311743) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd223:if (Encrypted_pixels[655] <= 10051064) begin state<=224; end  else begin state<=239; end 
 
16'd224:if (Encrypted_pixels[271] <= 10110880) begin state<=225; end  else begin state<=232; end 
 
16'd225:if (Encrypted_pixels[484] <= 10051064) begin state<=226; end  else begin state<=229; end 
 
16'd226:if (Encrypted_pixels[489] <= 10810050) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd229:if (Encrypted_pixels[219] <= 10178451) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 

16'd232:if (Encrypted_pixels[354] <= 10239092) begin state<=233; end  else begin state<=236; end 
 
16'd233:if (Encrypted_pixels[357] <= 10256163) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10178451; state<=0;ml_inference_completed<=1; end 

16'd236:if (Encrypted_pixels[156] <= 10810050) begin Label<=10256163; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10178451; state<=0;ml_inference_completed<=1; end 

16'd239:if (Encrypted_pixels[354] <= 10051064) begin state<=240; end  else begin state<=247; end 
 
16'd240:if (Encrypted_pixels[514] <= 13759948) begin state<=241; end  else begin state<=244; end 
 
16'd241:if (Encrypted_pixels[357] <= 10621710) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd244:if (Encrypted_pixels[384] <= 24644451) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd247:if (Encrypted_pixels[434] <= 13490312) begin state<=248; end  else begin state<=251; end 
 
16'd248:if (Encrypted_pixels[456] <= 13677650) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd251:if (Encrypted_pixels[514] <= 10051064) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd254:if (Encrypted_pixels[489] <= 12207861) begin state<=255; end  else begin state<=382; end 
 
16'd255:if (Encrypted_pixels[290] <= 13115331) begin state<=256; end  else begin state<=319; end 
 
16'd256:if (Encrypted_pixels[486] <= 18989692) begin state<=257; end  else begin state<=288; end 
 
16'd257:if (Encrypted_pixels[296] <= 10178451) begin state<=258; end  else begin state<=273; end 
 
16'd258:if (Encrypted_pixels[490] <= 17997012) begin state<=259; end  else begin state<=266; end 
 
16'd259:if (Encrypted_pixels[315] <= 11588596) begin state<=260; end  else begin state<=263; end 
 
16'd260:if (Encrypted_pixels[177] <= 10110880) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd263:if (Encrypted_pixels[299] <= 10178451) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10256163; state<=0;ml_inference_completed<=1; end 

16'd266:if (Encrypted_pixels[627] <= 10256163) begin state<=267; end  else begin state<=270; end 
 
16'd267:if (Encrypted_pixels[403] <= 12908743) begin Label<=10110880; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 

16'd270:if (Encrypted_pixels[382] <= 10051064) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd273:if (Encrypted_pixels[153] <= 10051064) begin state<=274; end  else begin state<=281; end 
 
16'd274:if (Encrypted_pixels[208] <= 14447938) begin state<=275; end  else begin state<=278; end 
 
16'd275:if (Encrypted_pixels[386] <= 10051064) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd278:if (Encrypted_pixels[316] <= 18026941) begin Label<=10239092; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10621710; state<=0;ml_inference_completed<=1; end 

16'd281:if (Encrypted_pixels[488] <= 14869055) begin state<=282; end  else begin state<=285; end 
 
16'd282:if (Encrypted_pixels[315] <= 22470632) begin Label<=10239092; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd285:if (Encrypted_pixels[467] <= 26492103) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd288:if (Encrypted_pixels[656] <= 10051064) begin state<=289; end  else begin state<=304; end 
 
16'd289:if (Encrypted_pixels[152] <= 10428057) begin state<=290; end  else begin state<=297; end 
 
16'd290:if (Encrypted_pixels[601] <= 17997012) begin state<=291; end  else begin state<=294; end 
 
16'd291:if (Encrypted_pixels[161] <= 13873290) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10110880; state<=0;ml_inference_completed<=1; end 

16'd294:if (Encrypted_pixels[271] <= 10178451) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd297:if (Encrypted_pixels[465] <= 10957410) begin state<=298; end  else begin state<=301; end 
 
16'd298:if (Encrypted_pixels[343] <= 12053585) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd301:if (Encrypted_pixels[431] <= 13490312) begin Label<=10239092; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd304:if (Encrypted_pixels[435] <= 16884121) begin state<=305; end  else begin state<=312; end 
 
16'd305:if (Encrypted_pixels[352] <= 10178451) begin state<=306; end  else begin state<=309; end 
 
16'd306:if (Encrypted_pixels[243] <= 11365368) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd309:if (Encrypted_pixels[410] <= 10178451) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd312:if (Encrypted_pixels[550] <= 32559869) begin state<=313; end  else begin state<=316; end 
 
16'd313:if (Encrypted_pixels[439] <= 33875088) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd316:if (Encrypted_pixels[292] <= 18753691) begin Label<=10239092; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd319:if (Encrypted_pixels[297] <= 10459335) begin state<=320; end  else begin state<=351; end 
 
16'd320:if (Encrypted_pixels[486] <= 14629144) begin state<=321; end  else begin state<=336; end 
 
16'd321:if (Encrypted_pixels[186] <= 10178451) begin state<=322; end  else begin state<=329; end 
 
16'd322:if (Encrypted_pixels[293] <= 30389757) begin state<=323; end  else begin state<=326; end 
 
16'd323:if (Encrypted_pixels[328] <= 10428057) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10256163; state<=0;ml_inference_completed<=1; end 

16'd326:if (Encrypted_pixels[463] <= 26813641) begin Label<=10239092; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10110880; state<=0;ml_inference_completed<=1; end 

16'd329:if (Encrypted_pixels[301] <= 16822442) begin state<=330; end  else begin state<=333; end 
 
16'd330:if (Encrypted_pixels[295] <= 31786626) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd333:if (Encrypted_pixels[381] <= 10459335) begin Label<=10051064; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd336:if (Encrypted_pixels[656] <= 10459335) begin state<=337; end  else begin state<=344; end 
 
16'd337:if (Encrypted_pixels[430] <= 17556604) begin state<=338; end  else begin state<=341; end 
 
16'd338:if (Encrypted_pixels[319] <= 33415852) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 

16'd341:if (Encrypted_pixels[571] <= 10239092) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd344:if (Encrypted_pixels[300] <= 10311743) begin state<=345; end  else begin state<=348; end 
 
16'd345:if (Encrypted_pixels[294] <= 22106706) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd348:if (Encrypted_pixels[407] <= 18134712) begin Label<=10051064; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd351:if (Encrypted_pixels[598] <= 10051064) begin state<=352; end  else begin state<=367; end 
 
16'd352:if (Encrypted_pixels[210] <= 10311743) begin state<=353; end  else begin state<=360; end 
 
16'd353:if (Encrypted_pixels[321] <= 30947139) begin state<=354; end  else begin state<=357; end 
 
16'd354:if (Encrypted_pixels[408] <= 25115710) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10256163; state<=0;ml_inference_completed<=1; end 

16'd357:if (Encrypted_pixels[404] <= 19741924) begin Label<=10459335; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10256163; state<=0;ml_inference_completed<=1; end 

16'd360:if (Encrypted_pixels[652] <= 10239092) begin state<=361; end  else begin state<=364; end 
 
16'd361:if (Encrypted_pixels[154] <= 13873290) begin Label<=10621710; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd364:if (Encrypted_pixels[513] <= 23600049) begin Label<=10239092; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd367:if (Encrypted_pixels[486] <= 10621710) begin state<=368; end  else begin state<=375; end 
 
16'd368:if (Encrypted_pixels[427] <= 25115710) begin state<=369; end  else begin state<=372; end 
 
16'd369:if (Encrypted_pixels[318] <= 16822442) begin Label<=10239092; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 

16'd372:if (Encrypted_pixels[380] <= 31615197) begin Label<=10051064; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 

16'd375:if (Encrypted_pixels[400] <= 11667110) begin state<=376; end  else begin state<=379; end 
 
16'd376:if (Encrypted_pixels[545] <= 14447938) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd379:if (Encrypted_pixels[242] <= 10311743) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd382:if (Encrypted_pixels[234] <= 10051064) begin state<=383; end  else begin state<=442; end 
 
16'd383:if (Encrypted_pixels[402] <= 10051064) begin state<=384; end  else begin state<=415; end 
 
16'd384:if (Encrypted_pixels[300] <= 11667110) begin state<=385; end  else begin state<=400; end 
 
16'd385:if (Encrypted_pixels[149] <= 10256163) begin state<=386; end  else begin state<=393; end 
 
16'd386:if (Encrypted_pixels[466] <= 10178451) begin state<=387; end  else begin state<=390; end 
 
16'd387:if (Encrypted_pixels[538] <= 12207861) begin Label<=10110880; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 

16'd390:if (Encrypted_pixels[404] <= 33648479) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd393:if (Encrypted_pixels[318] <= 10738547) begin state<=394; end  else begin state<=397; end 
 
16'd394:if (Encrypted_pixels[543] <= 11667110) begin Label<=10239092; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10178451; state<=0;ml_inference_completed<=1; end 

16'd397:if (Encrypted_pixels[434] <= 13178136) begin Label<=10239092; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd400:if (Encrypted_pixels[265] <= 10110880) begin state<=401; end  else begin state<=408; end 
 
16'd401:if (Encrypted_pixels[624] <= 10051064) begin state<=402; end  else begin state<=405; end 
 
16'd402:if (Encrypted_pixels[120] <= 10311743) begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd405:if (Encrypted_pixels[183] <= 10110880) begin Label<=10110880; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10178451; state<=0;ml_inference_completed<=1; end 

16'd408:if (Encrypted_pixels[514] <= 10810050) begin state<=409; end  else begin state<=412; end 
 
16'd409:if (Encrypted_pixels[212] <= 19646520) begin Label<=10459335; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10621710; state<=0;ml_inference_completed<=1; end 

16'd412:if (Encrypted_pixels[454] <= 10495495) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd415:if (Encrypted_pixels[103] <= 10110880) begin state<=416; end  else begin state<=431; end 
 
16'd416:if (Encrypted_pixels[276] <= 10495495) begin state<=417; end  else begin state<=424; end 
 
16'd417:if (Encrypted_pixels[712] <= 10239092) begin state<=418; end  else begin state<=421; end 
 
16'd418:if (Encrypted_pixels[657] <= 10051064) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd421:if (Encrypted_pixels[212] <= 15715255) begin Label<=10256163; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10621710; state<=0;ml_inference_completed<=1; end 

16'd424:if (Encrypted_pixels[381] <= 21154015) begin state<=425; end  else begin state<=428; end 
 
16'd425:if (Encrypted_pixels[374] <= 10239092) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 

16'd428:if (Encrypted_pixels[211] <= 10957410) begin Label<=10459335; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd431:if (Encrypted_pixels[271] <= 10964188) begin state<=432; end  else begin state<=437; end 
 
16'd432:if (Encrypted_pixels[398] <= 23934509) begin state<=433; end 
       else begin Label<=10311743; state<=0;ml_inference_completed<=1; end 
 
16'd433:if (Encrypted_pixels[152] <= 10256163) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd437:if (Encrypted_pixels[320] <= 26492103) begin Label<=10178451; state<=0;ml_inference_completed<=1; end  else begin state<=439; end 

16'd439:if (Encrypted_pixels[412] <= 33996506) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd442:if (Encrypted_pixels[658] <= 10178451) begin state<=443; end  else begin state<=474; end 
 
16'd443:if (Encrypted_pixels[345] <= 11365368) begin state<=444; end  else begin state<=459; end 
 
16'd444:if (Encrypted_pixels[526] <= 10110880) begin state<=445; end  else begin state<=452; end 
 
16'd445:if (Encrypted_pixels[514] <= 24976881) begin state<=446; end  else begin state<=449; end 
 
16'd446:if (Encrypted_pixels[603] <= 29431268) begin Label<=10459335; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10110880; state<=0;ml_inference_completed<=1; end 

16'd449:if (Encrypted_pixels[320] <= 24821599) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd452:if (Encrypted_pixels[370] <= 10700220) begin state<=453; end  else begin state<=456; end 
 
16'd453:if (Encrypted_pixels[284] <= 11885383) begin Label<=10178451; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd456:if (Encrypted_pixels[151] <= 15783505) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd459:if (Encrypted_pixels[575] <= 32340647) begin state<=460; end  else begin state<=467; end 
 
16'd460:if (Encrypted_pixels[211] <= 19566562) begin state<=461; end  else begin state<=464; end 
 
16'd461:if (Encrypted_pixels[408] <= 20186726) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10256163; state<=0;ml_inference_completed<=1; end 

16'd464:if (Encrypted_pixels[541] <= 18770967) begin Label<=10621710; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10178451; state<=0;ml_inference_completed<=1; end 

16'd467:if (Encrypted_pixels[239] <= 19741924) begin state<=468; end  else begin state<=471; end 
 
16'd468:if (Encrypted_pixels[187] <= 14608709) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd471:if (Encrypted_pixels[453] <= 28630342) begin Label<=10428057; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10051064; state<=0;ml_inference_completed<=1; end 

16'd474:if (Encrypted_pixels[515] <= 14836263) begin state<=475; end  else begin state<=490; end 
 
16'd475:if (Encrypted_pixels[545] <= 10311743) begin state<=476; end  else begin state<=483; end 
 
16'd476:if (Encrypted_pixels[318] <= 18425234) begin state<=477; end  else begin state<=480; end 
 
16'd477:if (Encrypted_pixels[546] <= 24337832) begin Label<=10239092; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10110880; state<=0;ml_inference_completed<=1; end 

16'd480:if (Encrypted_pixels[485] <= 20701944) begin Label<=10621710; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10495495; state<=0;ml_inference_completed<=1; end 

16'd483:if (Encrypted_pixels[578] <= 11763668) begin state<=484; end  else begin state<=487; end 
 
16'd484:if (Encrypted_pixels[346] <= 14348370) begin Label<=10459335; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10621710; state<=0;ml_inference_completed<=1; end 

16'd487:if (Encrypted_pixels[575] <= 30296791) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

16'd490:if (Encrypted_pixels[319] <= 10051064) begin state<=491; end  else begin state<=498; end 
 
16'd491:if (Encrypted_pixels[344] <= 21624175) begin state<=492; end  else begin state<=495; end 
 
16'd492:if (Encrypted_pixels[608] <= 10256163) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10178451; state<=0;ml_inference_completed<=1; end 

16'd495:if (Encrypted_pixels[122] <= 10311743) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10428057; state<=0;ml_inference_completed<=1; end 

16'd498:if (Encrypted_pixels[440] <= 16630217) begin state<=499; end  else begin state<=502; end 
 
16'd499:if (Encrypted_pixels[609] <= 29913437) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10178451; state<=0;ml_inference_completed<=1; end 

16'd502:if (Encrypted_pixels[547] <= 10810050) begin Label<=10495495; state<=0;ml_inference_completed<=1; end 
       else begin Label<=10239092; state<=0;ml_inference_completed<=1; end 

        endcase
        end
    end




endmodule

module Binary_To_7Segment 
  (
   input       i_Clk,
	input [3:0] i_Binary_Num,
   output      o_Segment_A,
   output      o_Segment_B,
   output      o_Segment_C,
   output      o_Segment_D,
   output      o_Segment_E,
   output      o_Segment_F,
   output      o_Segment_G
   );
 
  reg [6:0]    r_Hex_Encoding = 7'h00;
   
  // Purpose: Creates a case statement for all possible input binary numbers.
  // Drives r_Hex_Encoding appropriately for each input combination.
  // Encoding at https://www.fpga4student.com/2017/09/seven-segment-led-display-controller-basys3-fpga.html
  always @(posedge i_Clk)
    begin
      case (i_Binary_Num)
        4'b0000 : r_Hex_Encoding <= 7'b0000001;
        4'b0001 : r_Hex_Encoding <= 7'b1001111;
        4'b0010 : r_Hex_Encoding <= 7'b0010010;
        4'b0011 : r_Hex_Encoding <= 7'b0000110;
        4'b0100 : r_Hex_Encoding <= 7'b1001100;         
        4'b0101 : r_Hex_Encoding <= 7'b0100100;
        4'b0110 : r_Hex_Encoding <= 7'b0100000;
        4'b0111 : r_Hex_Encoding <= 7'b0001111;
        4'b1000 : r_Hex_Encoding <= 7'b0000000;
        4'b1001 : r_Hex_Encoding <= 7'b0000100; 
		  4'b1010 : r_Hex_Encoding <= 7'b0001000; //a
		  4'b1011 : r_Hex_Encoding <= 7'b1100000; //b
		  4'b1100 : r_Hex_Encoding <= 7'b0110001;  //c
		  4'b1101 : r_Hex_Encoding <= 7'b1000010;  //d
		  4'b1110 : r_Hex_Encoding <= 7'b0110000;  //e
		  4'b1111 : r_Hex_Encoding <= 7'b0111000;  //f
        default: r_Hex_Encoding = 7'b1111111;
      endcase
    end // always @ (posedge i_Clk)
 
  // r_Hex_Encoding[7] is unused
  assign o_Segment_A = r_Hex_Encoding[6];
  assign o_Segment_B = r_Hex_Encoding[5];
  assign o_Segment_C = r_Hex_Encoding[4];
  assign o_Segment_D = r_Hex_Encoding[3];
  assign o_Segment_E = r_Hex_Encoding[2];
  assign o_Segment_F = r_Hex_Encoding[1];
  assign o_Segment_G = r_Hex_Encoding[0];
 
endmodule // Binary_To_7Segment



//////////////////////////////////////////////////////////////////////
// File Downloaded from http://www.nandland.com
//////////////////////////////////////////////////////////////////////
// This file contains the UART Receiver.  This receiver is able to
// receive 8 bits of serial data, one start bit, one stop bit,
// and no parity bit.  When receive is complete o_rx_dv will be
// driven high for one clock cycle.
// https://www.nandland.com/vhdl/modules/module-uart-serial-port-rs232.html
// Set Parameter CLKS_PER_BIT as follows:
// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)
// Example: 50 MHz Clock, 921600 baud UART
// (50000000)/(921600) = 53
  
module uart_rx   #(parameter CLKS_PER_BIT = 53)
  (
   input        i_Clock,
   input        i_Rx_Serial,
   output       o_Rx_DV,
   output [7:0] o_Rx_Byte
   );
    
  parameter s_IDLE         = 3'b000;
  parameter s_RX_START_BIT = 3'b001;
  parameter s_RX_DATA_BITS = 3'b010;
  parameter s_RX_STOP_BIT  = 3'b011; 
  parameter s_CLEANUP      = 3'b100;
   
  reg           r_Rx_Data_R = 1'b1;
  reg           r_Rx_Data   = 1'b1;
   
  reg [7:0]     r_Clock_Count = 0;
  reg [2:0]     r_Bit_Index   = 0; //8 bits total
  reg [7:0]     r_Rx_Byte     = 0;
  reg           r_Rx_DV       = 0;
  reg [2:0]     r_SM_Main     = 0;
   
  // Purpose: Double-register the incoming data.
  // This allows it to be used in the UART RX Clock Domain.
  // (It removes problems caused by metastability)
  always @(posedge i_Clock)
    begin
      r_Rx_Data_R <= i_Rx_Serial;
      r_Rx_Data   <= r_Rx_Data_R;
    end
   
   
  // Purpose: Control RX state machine
  always @(posedge i_Clock)
    begin
       
      case (r_SM_Main)
        s_IDLE :
          begin
            r_Rx_DV       <= 1'b0;
            r_Clock_Count <= 0;
            r_Bit_Index   <= 0;
             
            if (r_Rx_Data == 1'b0)          // Start bit detected
              r_SM_Main <= s_RX_START_BIT;
            else
              r_SM_Main <= s_IDLE;
          end
         
        // Check middle of start bit to make sure it's still low
        s_RX_START_BIT :
          begin
            if (r_Clock_Count == (CLKS_PER_BIT-1)/2)
              begin
                if (r_Rx_Data == 1'b0)
                  begin
                    r_Clock_Count <= 0;  // reset counter, found the middle
                    r_SM_Main     <= s_RX_DATA_BITS;
                  end
                else
                  r_SM_Main <= s_IDLE;
              end
            else
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_START_BIT;
              end
          end // case: s_RX_START_BIT
         
         
        // Wait CLKS_PER_BIT-1 clock cycles to sample serial data
        s_RX_DATA_BITS :
          begin
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_DATA_BITS;
              end
            else
              begin
                r_Clock_Count          <= 0;
                r_Rx_Byte[r_Bit_Index] <= r_Rx_Data;
                 
                // Check if we have received all bits
                if (r_Bit_Index < 7)
                  begin
                    r_Bit_Index <= r_Bit_Index + 1;
                    r_SM_Main   <= s_RX_DATA_BITS;
                  end
                else
                  begin
                    r_Bit_Index <= 0;
                    r_SM_Main   <= s_RX_STOP_BIT;
                  end
              end
          end // case: s_RX_DATA_BITS
     
     
        // Receive Stop bit.  Stop bit = 1
        s_RX_STOP_BIT :
          begin
            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_RX_STOP_BIT;
              end
            else
              begin
                r_Rx_DV       <= 1'b1;
                r_Clock_Count <= 0;
                r_SM_Main     <= s_CLEANUP;
              end
          end // case: s_RX_STOP_BIT
     
        // Stay here 1 clock
        s_CLEANUP :
          begin
            r_SM_Main <= s_IDLE;
            r_Rx_DV   <= 1'b0;
          end
         
         
        default :
          r_SM_Main <= s_IDLE;
         
      endcase
    end   
   
  assign o_Rx_DV   = r_Rx_DV;
  assign o_Rx_Byte = r_Rx_Byte;
   
endmodule // uart_rx


//////////////////////////////////////////////////////////////////////
// File Downloaded from http://www.nandland.com
//////////////////////////////////////////////////////////////////////
// This file contains the UART Transmitter.  This transmitter is able
// to transmit 8 bits of serial data, one start bit, one stop bit,
// and no parity bit.  When transmit is complete o_Tx_done will be
// driven high for one clock cycle.
//
// Set Parameter CLKS_PER_BIT as follows:
// CLKS_PER_BIT = (Frequency of i_Clock)/(Frequency of UART)
// Example: 50 MHz Clock, 921600 baud UART
// (50000000)/(921600) = 53
  
module uart_tx 
  #(parameter CLKS_PER_BIT = 53)
  (
   input       i_Clock,
   input       i_Tx_DV,
   input [7:0] i_Tx_Byte, 
   output      o_Tx_Active,
   output reg  o_Tx_Serial,
   output      o_Tx_Done
   );
  
  parameter s_IDLE         = 3'b000;
  parameter s_TX_START_BIT = 3'b001;
  parameter s_TX_DATA_BITS = 3'b010;
  parameter s_TX_STOP_BIT  = 3'b011;
  parameter s_CLEANUP      = 3'b100;
   
  reg [2:0]    r_SM_Main     = 0;
  reg [7:0]    r_Clock_Count = 0;
  reg [2:0]    r_Bit_Index   = 0;
  reg [7:0]    r_Tx_Data     = 0;
  reg          r_Tx_Done     = 0;
  reg          r_Tx_Active   = 0;
     
  always @(posedge i_Clock)
    begin
       
      case (r_SM_Main)
        s_IDLE :
          begin
            o_Tx_Serial   <= 1'b1;         // Drive Line High for Idle
            r_Tx_Done     <= 1'b0;
            r_Clock_Count <= 0;
            r_Bit_Index   <= 0;
             
            if (i_Tx_DV == 1'b1)
              begin
                r_Tx_Active <= 1'b1;
                r_Tx_Data   <= i_Tx_Byte;
                r_SM_Main   <= s_TX_START_BIT;
              end
            else
              r_SM_Main <= s_IDLE;
          end // case: s_IDLE
         
         
        // Send out Start Bit. Start bit = 0
        s_TX_START_BIT :
          begin
            o_Tx_Serial <= 1'b0;
             
            // Wait CLKS_PER_BIT-1 clock cycles for start bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_START_BIT;
              end
            else
              begin
                r_Clock_Count <= 0;
                r_SM_Main     <= s_TX_DATA_BITS;
              end
          end // case: s_TX_START_BIT
         
         
        // Wait CLKS_PER_BIT-1 clock cycles for data bits to finish         
        s_TX_DATA_BITS :
          begin
            o_Tx_Serial <= r_Tx_Data[r_Bit_Index];
             
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_DATA_BITS;
              end
            else
              begin
                r_Clock_Count <= 0;
                 
                // Check if we have sent out all bits
                if (r_Bit_Index < 7)
                  begin
                    r_Bit_Index <= r_Bit_Index + 1;
                    r_SM_Main   <= s_TX_DATA_BITS;
                  end
                else
                  begin
                    r_Bit_Index <= 0;
                    r_SM_Main   <= s_TX_STOP_BIT;
                  end
              end
          end // case: s_TX_DATA_BITS
         
         
        // Send out Stop bit.  Stop bit = 1
        s_TX_STOP_BIT :
          begin
            o_Tx_Serial <= 1'b1;
             
            // Wait CLKS_PER_BIT-1 clock cycles for Stop bit to finish
            if (r_Clock_Count < CLKS_PER_BIT-1)
              begin
                r_Clock_Count <= r_Clock_Count + 1;
                r_SM_Main     <= s_TX_STOP_BIT;
              end
            else
              begin
                r_Tx_Done     <= 1'b1;
                r_Clock_Count <= 0;
                r_SM_Main     <= s_CLEANUP;
                r_Tx_Active   <= 1'b0;
              end
          end // case: s_Tx_STOP_BIT
         
         
        // Stay here 1 clock
        s_CLEANUP :
          begin
            r_Tx_Done <= 1'b1;
            r_SM_Main <= s_IDLE;
          end
         
         
        default :
          r_SM_Main <= s_IDLE;
         
      endcase
    end
 
  assign o_Tx_Active = r_Tx_Active;
  assign o_Tx_Done   = r_Tx_Done;
   
endmodule

